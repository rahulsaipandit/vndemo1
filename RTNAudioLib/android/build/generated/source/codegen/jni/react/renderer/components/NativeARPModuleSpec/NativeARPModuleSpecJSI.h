/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleH.js
 */

#pragma once

#include <ReactCommon/TurboModule.h>
#include <react/bridging/Bridging.h>

namespace facebook {
namespace react {


  class JSI_EXPORT NativeARPModuleCxxSpecJSI : public TurboModule {
protected:
  NativeARPModuleCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);

public:
  virtual jsi::Value startRecorder(jsi::Runtime &rt, jsi::String path, jsi::Object audioSet, bool meteringEnabled) = 0;
  virtual jsi::Value resumeRecorder(jsi::Runtime &rt) = 0;
  virtual jsi::Value pauseRecorder(jsi::Runtime &rt) = 0;
  virtual jsi::Value stopRecorder(jsi::Runtime &rt) = 0;
  virtual jsi::Value setVolume(jsi::Runtime &rt, double volume) = 0;
  virtual jsi::Value startPlayer(jsi::Runtime &rt, jsi::String path, jsi::Object httpHeaders) = 0;
  virtual jsi::Value resumePlayer(jsi::Runtime &rt) = 0;
  virtual jsi::Value pausePlayer(jsi::Runtime &rt) = 0;
  virtual jsi::Value seekToPlayer(jsi::Runtime &rt, double time) = 0;
  virtual jsi::Value stopPlayer(jsi::Runtime &rt) = 0;
  virtual jsi::Value setSubscriptionDuration(jsi::Runtime &rt, double sec) = 0;

};

template <typename T>
class JSI_EXPORT NativeARPModuleCxxSpec : public TurboModule {
public:
  jsi::Value get(jsi::Runtime &rt, const jsi::PropNameID &propName) override {
    return delegate_.get(rt, propName);
  }

protected:
  NativeARPModuleCxxSpec(std::shared_ptr<CallInvoker> jsInvoker)
    : TurboModule("NativeARPModule", jsInvoker),
      delegate_(static_cast<T*>(this), jsInvoker) {}

private:
  class Delegate : public NativeARPModuleCxxSpecJSI {
  public:
    Delegate(T *instance, std::shared_ptr<CallInvoker> jsInvoker) :
      NativeARPModuleCxxSpecJSI(std::move(jsInvoker)), instance_(instance) {}

    jsi::Value startRecorder(jsi::Runtime &rt, jsi::String path, jsi::Object audioSet, bool meteringEnabled) override {
      static_assert(
          bridging::getParameterCount(&T::startRecorder) == 4,
          "Expected startRecorder(...) to have 4 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::startRecorder, jsInvoker_, instance_, std::move(path), std::move(audioSet), std::move(meteringEnabled));
    }
    jsi::Value resumeRecorder(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::resumeRecorder) == 1,
          "Expected resumeRecorder(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::resumeRecorder, jsInvoker_, instance_);
    }
    jsi::Value pauseRecorder(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::pauseRecorder) == 1,
          "Expected pauseRecorder(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::pauseRecorder, jsInvoker_, instance_);
    }
    jsi::Value stopRecorder(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::stopRecorder) == 1,
          "Expected stopRecorder(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::stopRecorder, jsInvoker_, instance_);
    }
    jsi::Value setVolume(jsi::Runtime &rt, double volume) override {
      static_assert(
          bridging::getParameterCount(&T::setVolume) == 2,
          "Expected setVolume(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::setVolume, jsInvoker_, instance_, std::move(volume));
    }
    jsi::Value startPlayer(jsi::Runtime &rt, jsi::String path, jsi::Object httpHeaders) override {
      static_assert(
          bridging::getParameterCount(&T::startPlayer) == 3,
          "Expected startPlayer(...) to have 3 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::startPlayer, jsInvoker_, instance_, std::move(path), std::move(httpHeaders));
    }
    jsi::Value resumePlayer(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::resumePlayer) == 1,
          "Expected resumePlayer(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::resumePlayer, jsInvoker_, instance_);
    }
    jsi::Value pausePlayer(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::pausePlayer) == 1,
          "Expected pausePlayer(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::pausePlayer, jsInvoker_, instance_);
    }
    jsi::Value seekToPlayer(jsi::Runtime &rt, double time) override {
      static_assert(
          bridging::getParameterCount(&T::seekToPlayer) == 2,
          "Expected seekToPlayer(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::seekToPlayer, jsInvoker_, instance_, std::move(time));
    }
    jsi::Value stopPlayer(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::stopPlayer) == 1,
          "Expected stopPlayer(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::stopPlayer, jsInvoker_, instance_);
    }
    jsi::Value setSubscriptionDuration(jsi::Runtime &rt, double sec) override {
      static_assert(
          bridging::getParameterCount(&T::setSubscriptionDuration) == 2,
          "Expected setSubscriptionDuration(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::setSubscriptionDuration, jsInvoker_, instance_, std::move(sec));
    }

  private:
    T *instance_;
  };

  Delegate delegate_;
};

} // namespace react
} // namespace facebook
